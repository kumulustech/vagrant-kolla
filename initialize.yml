---
- hosts: all
  gather_facts: False
  become_user: root
  tasks:
  - name: install python 2
    #    raw: test -e /usr/bin/python || (apt-get -y update && apt-get install -y python-minimal)
    raw: test -e /usr/bin/python || (sudo apt install -y python-minimal)

- hosts: localhost
  connection: local
  tasks:
  - name: find local ssh keys
    find: path='./' patterns='id_rsa.*'
    register: ssh_found
  - name: create ssh key
    command: ssh-keygen -t rsa -N '' -f id_rsa
    delegate_to: localhost
    ignore_errors: yes
    when: ssh_found.matched == 0

- hosts: all
  become: true
  become_user: root
  tasks:
  - name: stop daily apt tasks
    service:
      name: apt-daily.timer
      state: stopped
  - name: create and update ssh for shared communications
    include: tasks/ssh.yml
  - name: ensure hosts file is correct
    include: tasks/hosts.yml
  - name: ensure resolve has search for domain
    include: tasks/resolve.yml
  - name: upload files
    copy: src={{item}} dest=/root/{{item}} mode=0755
    with_items:
      - add_flavor.sh
      - post-install.sh
      - setup_network.sh
      - import_image.sh
      - launch.sh
      - launch
      #- labels.yml

  - name: upload multinode template
    template: src=templates/multinode.j2 dest=/root/multinode
 
  - name: Pass options to dpkg on run
    apt:
      upgrade: dist
      update_cache: yes
      dpkg_options: 'force-confold,force-confdef'
  - name: install default packages
    apt: 
      name: '{{item}}'
      state: latest
    with_items:
     - python-pip
     - vim
     - htop
     - python-dev
     - python-netaddr
     - libffi-dev
     - libssl-dev
     - gcc
     - git
     - gawk
     - bridge-utils

  - name: remove LXC/LXD
    apt: 
      name: '{{item}}' 
      state: absent
    with_items:
     - lxc
     - lxd

  - name: update pip
    pip:
     name: pip
     state: latest
  - name: update pip
    pip:
     name: '{{item}}'
     state: latest
    with_items:
    - setuptools
    - docker==2.0.1 
    - ansible
    - pyopenssl

  - name: clone kolla and kolla-ansible
    git:
      repo: https://github.com/openstack/{{item}}
      dest: /root/{{item}}
      version: stable/rocky
    with_items:
      - kolla
      - kolla-ansible

  - name: install kolla via pip
    command: pip install /root/kolla /root/kolla-ansible creates=/usr/local/share/kolla
  
  - name: mkdir the /etc/kolla directory
    file:
      dest: /etc/kolla/
      state: directory
      mode: 0755
  
  - name: copy default passwords file
    copy:
      src: files/passwords.yml
      dest: /etc/kolla/passwords.yml
  
  - name: generate passwords
    command: kolla-genpwd
  
  - name: set default admin password
    lineinfile:
      dest: /etc/kolla/passwords.yml
      regexp: '^keystone_admin_password:.*'
      line: 'keystone_admin_password: This!5@Password'
 
  - name: create globals.yml from template
    template:
      src: templates/globals.j2
      dest: /etc/kolla/globals.yml

  - name: add nested VM support to the kernel
    lineinfile:
      line: options kvm-intel nested=1
      state: present
      path: /etc/modprobe.d/kvm-intel.conf
      create: yes
  - name: reset kvm module
    shell:  modprobe -r kvm && modprobe kvm
    ignore_errors: true
  - name: ensure localtime is a link
    file:
     src: /etc/timezone
     dest: /etc/localtime
     state: link
     force: yes

#- hosts: control[0]
#  become: true
#  become_user: root
#  tasks:
#
#  - name: create dummy interface
#    command: modprobe dummy
#  - name: create dummy interface ext
#    command: ip link set name ext dev dummy0 creates=/etc/modprobe.d/dummy.conf
#  - name: ensure dummy on reboot
#    lineinfile:
#      line: install dummy /sbin/modprobe --ignore-install dummy; /sbin/ip link set name ext dev dummy0
#      path: /etc/modprobe.d/dummy.conf
#      create: yes


- hosts: control[0]
  become: true
  become_user: root
  tasks:
  - name: install host bootstrap requirements
    command: kolla-ansible -i multinode bootstrap-servers

  - name: launch openstack with kolla
    command: kolla-ansible -i multinode deploy

  - name: run post-install config
    command: /root/post-install.sh

  - name: enable masquerade (NAT) on external interface
    include: tasks/masq.yml
